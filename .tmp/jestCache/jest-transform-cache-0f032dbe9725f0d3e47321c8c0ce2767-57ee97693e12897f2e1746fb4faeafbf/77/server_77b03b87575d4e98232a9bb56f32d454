9337fe8e0475a98fa943f162aee6eb4a
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = void 0;
const cors_1 = __importDefault(require("cors"));
const express_1 = __importStar(require("express"));
const express_promise_router_1 = __importDefault(require("express-promise-router"));
const helmet_1 = __importDefault(require("helmet"));
const dependency_injection_1 = require("./dependency-injection");
const routes_1 = require("./routes");
class Server {
    constructor(port) {
        this.port = port;
        /* Get the logger from the container of dependency injection */
        this.logger = dependency_injection_1.container.get(dependency_injection_1.ContainerTypes.Logger);
        /* Initializes the express application */
        this.express = (0, express_1.default)();
        /* Parses the request data */
        this.express.use((0, express_1.json)());
        this.express.use((0, express_1.urlencoded)({ extended: true }));
        /* Helmet is for app security with headers */
        this.express.use((0, helmet_1.default)());
        /* Cors development configuration, not use in production */
        this.express.use((0, cors_1.default)({ origin: "*" }));
        /* Setup the router */
        const router = (0, express_promise_router_1.default)();
        this.express.use(router);
        /* Function to register all routes */
        (0, routes_1.registerRoutes)(router);
        /* Setup the error handler */
        router.use((err, req, res, next) => {
            this.logger.error(err);
            res.status(500).send({ error: "Internal Server Error" });
        });
    }
    async listen() {
        return new Promise((resolve) => {
            this.httpServer = this.express.listen(this.port, () => {
                this.logger.info(`Application is running at http://localhost:${this.port} in ${this.express.get("env")} mode`);
                this.logger.info("Press CTRL-C to stop\n");
                resolve();
            });
        });
    }
    async stop() {
        return new Promise((resolve, reject) => {
            if (!this.httpServer)
                return resolve();
            this.httpServer.close((err) => {
                return err ? reject(err) : resolve();
            });
        });
    }
    getHttpServer() {
        return this.httpServer;
    }
}
exports.Server = Server;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvaGVybmFuL0Rlc2t0b3AvUHJvamVjdHMvdGVtcGxhdGVzL25vZGVqcy1zb2xpZC10ZW1wbGF0ZS9zcmMvc2VydmVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZ0RBQXdCO0FBQ3hCLG1EQU1pQjtBQUNqQixvRkFBNEM7QUFDNUMsb0RBQTRCO0FBRTVCLGlFQUFtRTtBQUVuRSxxQ0FBMEM7QUFFMUMsTUFBYSxNQUFNO0lBTWpCLFlBQVksSUFBWTtRQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUVqQiwrREFBK0Q7UUFDL0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxnQ0FBUyxDQUFDLEdBQUcsQ0FBUyxxQ0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTNELHlDQUF5QztRQUN6QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUEsaUJBQU8sR0FBRSxDQUFDO1FBRXpCLDZCQUE2QjtRQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFBLGNBQUksR0FBRSxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBQSxvQkFBVSxFQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVqRCw2Q0FBNkM7UUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBQSxnQkFBTSxHQUFFLENBQUMsQ0FBQztRQUUzQiwyREFBMkQ7UUFDM0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBQSxjQUFJLEVBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXhDLHNCQUFzQjtRQUN0QixNQUFNLE1BQU0sR0FBRyxJQUFBLGdDQUFNLEdBQUUsQ0FBQztRQUV4QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV6QixxQ0FBcUM7UUFDckMsSUFBQSx1QkFBYyxFQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXZCLDZCQUE2QjtRQUM3QixNQUFNLENBQUMsR0FBRyxDQUNSLENBQUMsR0FBVSxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0IsRUFBRSxFQUFFO1lBQzlELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTTtRQUNWLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFO2dCQUNwRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDZCw4Q0FDRSxJQUFJLENBQUMsSUFDUCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQ3RDLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztnQkFDM0MsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJO1FBQ1IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVU7Z0JBQUUsT0FBTyxPQUFPLEVBQUUsQ0FBQztZQUV2QyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUM1QixPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN2QyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGFBQWE7UUFDWCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBckVELHdCQXFFQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9oZXJuYW4vRGVza3RvcC9Qcm9qZWN0cy90ZW1wbGF0ZXMvbm9kZWpzLXNvbGlkLXRlbXBsYXRlL3NyYy9zZXJ2ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvcnMgZnJvbSBcImNvcnNcIjtcbmltcG9ydCBleHByZXNzLCB7XG4gIE5leHRGdW5jdGlvbixcbiAgUmVxdWVzdCxcbiAgUmVzcG9uc2UsXG4gIGpzb24sXG4gIHVybGVuY29kZWQsXG59IGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCJleHByZXNzLXByb21pc2Utcm91dGVyXCI7XG5pbXBvcnQgaGVsbWV0IGZyb20gXCJoZWxtZXRcIjtcbmltcG9ydCBodHRwIGZyb20gXCJodHRwXCI7XG5pbXBvcnQgeyBDb250YWluZXJUeXBlcywgY29udGFpbmVyIH0gZnJvbSBcIi4vZGVwZW5kZW5jeS1pbmplY3Rpb25cIjtcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCIuL21vZHVsZXMvc2hhcmVkL2ludGVyZmFjZXMvTG9nZ2VyXCI7XG5pbXBvcnQgeyByZWdpc3RlclJvdXRlcyB9IGZyb20gXCIuL3JvdXRlc1wiO1xuXG5leHBvcnQgY2xhc3MgU2VydmVyIHtcbiAgcHJpdmF0ZSBleHByZXNzOiBleHByZXNzLkV4cHJlc3M7XG4gIHByaXZhdGUgbG9nZ2VyOiBMb2dnZXI7XG4gIHByaXZhdGUgcG9ydDogc3RyaW5nO1xuICBodHRwU2VydmVyPzogaHR0cC5TZXJ2ZXI7XG5cbiAgY29uc3RydWN0b3IocG9ydDogc3RyaW5nKSB7XG4gICAgdGhpcy5wb3J0ID0gcG9ydDtcblxuICAgIC8qIEdldCB0aGUgbG9nZ2VyIGZyb20gdGhlIGNvbnRhaW5lciBvZiBkZXBlbmRlbmN5IGluamVjdGlvbiAqL1xuICAgIHRoaXMubG9nZ2VyID0gY29udGFpbmVyLmdldDxMb2dnZXI+KENvbnRhaW5lclR5cGVzLkxvZ2dlcik7XG5cbiAgICAvKiBJbml0aWFsaXplcyB0aGUgZXhwcmVzcyBhcHBsaWNhdGlvbiAqL1xuICAgIHRoaXMuZXhwcmVzcyA9IGV4cHJlc3MoKTtcblxuICAgIC8qIFBhcnNlcyB0aGUgcmVxdWVzdCBkYXRhICovXG4gICAgdGhpcy5leHByZXNzLnVzZShqc29uKCkpO1xuICAgIHRoaXMuZXhwcmVzcy51c2UodXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcblxuICAgIC8qIEhlbG1ldCBpcyBmb3IgYXBwIHNlY3VyaXR5IHdpdGggaGVhZGVycyAqL1xuICAgIHRoaXMuZXhwcmVzcy51c2UoaGVsbWV0KCkpO1xuXG4gICAgLyogQ29ycyBkZXZlbG9wbWVudCBjb25maWd1cmF0aW9uLCBub3QgdXNlIGluIHByb2R1Y3Rpb24gKi9cbiAgICB0aGlzLmV4cHJlc3MudXNlKGNvcnMoeyBvcmlnaW46IFwiKlwiIH0pKTtcblxuICAgIC8qIFNldHVwIHRoZSByb3V0ZXIgKi9cbiAgICBjb25zdCByb3V0ZXIgPSBSb3V0ZXIoKTtcblxuICAgIHRoaXMuZXhwcmVzcy51c2Uocm91dGVyKTtcblxuICAgIC8qIEZ1bmN0aW9uIHRvIHJlZ2lzdGVyIGFsbCByb3V0ZXMgKi9cbiAgICByZWdpc3RlclJvdXRlcyhyb3V0ZXIpO1xuXG4gICAgLyogU2V0dXAgdGhlIGVycm9yIGhhbmRsZXIgKi9cbiAgICByb3V0ZXIudXNlKFxuICAgICAgKGVycjogRXJyb3IsIHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGVycik7XG4gICAgICAgIHJlcy5zdGF0dXMoNTAwKS5zZW5kKHsgZXJyb3I6IFwiSW50ZXJuYWwgU2VydmVyIEVycm9yXCIgfSk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGxpc3RlbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHRoaXMuaHR0cFNlcnZlciA9IHRoaXMuZXhwcmVzcy5saXN0ZW4odGhpcy5wb3J0LCAoKSA9PiB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmluZm8oXG4gICAgICAgICAgYEFwcGxpY2F0aW9uIGlzIHJ1bm5pbmcgYXQgaHR0cDovL2xvY2FsaG9zdDoke1xuICAgICAgICAgICAgdGhpcy5wb3J0XG4gICAgICAgICAgfSBpbiAke3RoaXMuZXhwcmVzcy5nZXQoXCJlbnZcIil9IG1vZGVgXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMubG9nZ2VyLmluZm8oXCJQcmVzcyBDVFJMLUMgdG8gc3RvcFxcblwiKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBzdG9wKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAoIXRoaXMuaHR0cFNlcnZlcikgcmV0dXJuIHJlc29sdmUoKTtcblxuICAgICAgdGhpcy5odHRwU2VydmVyLmNsb3NlKChlcnIpID0+IHtcbiAgICAgICAgcmV0dXJuIGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRIdHRwU2VydmVyKCk6IGh0dHAuU2VydmVyIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5odHRwU2VydmVyO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=