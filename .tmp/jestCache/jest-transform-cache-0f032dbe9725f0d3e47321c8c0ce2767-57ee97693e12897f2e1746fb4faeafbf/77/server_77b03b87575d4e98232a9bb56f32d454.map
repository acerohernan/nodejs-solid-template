{"file":"/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/server.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAwB;AACxB,mDAMiB;AACjB,oFAA4C;AAC5C,oDAA4B;AAE5B,iEAAmE;AAEnE,qCAA0C;AAE1C,MAAa,MAAM;IAMjB,YAAY,IAAY;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,+DAA+D;QAC/D,IAAI,CAAC,MAAM,GAAG,gCAAS,CAAC,GAAG,CAAS,qCAAc,CAAC,MAAM,CAAC,CAAC;QAE3D,yCAAyC;QACzC,IAAI,CAAC,OAAO,GAAG,IAAA,iBAAO,GAAE,CAAC;QAEzB,6BAA6B;QAC7B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAA,cAAI,GAAE,CAAC,CAAC;QACzB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAA,oBAAU,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAEjD,6CAA6C;QAC7C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAA,gBAAM,GAAE,CAAC,CAAC;QAE3B,2DAA2D;QAC3D,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAA,cAAI,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QAExC,sBAAsB;QACtB,MAAM,MAAM,GAAG,IAAA,gCAAM,GAAE,CAAC;QAExB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAEzB,qCAAqC;QACrC,IAAA,uBAAc,EAAC,MAAM,CAAC,CAAC;QAEvB,6BAA6B;QAC7B,MAAM,CAAC,GAAG,CACR,CAAC,GAAU,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;YAC9D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACvB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,uBAAuB,EAAE,CAAC,CAAC;QAC3D,CAAC,CACF,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,MAAM;QACV,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC7B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE;gBACpD,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,8CACE,IAAI,CAAC,IACP,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CACtC,CAAC;gBACF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;gBAC3C,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,IAAI;QACR,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,IAAI,CAAC,UAAU;gBAAE,OAAO,OAAO,EAAE,CAAC;YAEvC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;gBAC5B,OAAO,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YACvC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;CACF;AArED,wBAqEC","names":[],"sources":["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/server.ts"],"sourcesContent":["import cors from \"cors\";\nimport express, {\n  NextFunction,\n  Request,\n  Response,\n  json,\n  urlencoded,\n} from \"express\";\nimport Router from \"express-promise-router\";\nimport helmet from \"helmet\";\nimport http from \"http\";\nimport { ContainerTypes, container } from \"./dependency-injection\";\nimport { Logger } from \"./modules/shared/interfaces/Logger\";\nimport { registerRoutes } from \"./routes\";\n\nexport class Server {\n  private express: express.Express;\n  private logger: Logger;\n  private port: string;\n  httpServer?: http.Server;\n\n  constructor(port: string) {\n    this.port = port;\n\n    /* Get the logger from the container of dependency injection */\n    this.logger = container.get<Logger>(ContainerTypes.Logger);\n\n    /* Initializes the express application */\n    this.express = express();\n\n    /* Parses the request data */\n    this.express.use(json());\n    this.express.use(urlencoded({ extended: true }));\n\n    /* Helmet is for app security with headers */\n    this.express.use(helmet());\n\n    /* Cors development configuration, not use in production */\n    this.express.use(cors({ origin: \"*\" }));\n\n    /* Setup the router */\n    const router = Router();\n\n    this.express.use(router);\n\n    /* Function to register all routes */\n    registerRoutes(router);\n\n    /* Setup the error handler */\n    router.use(\n      (err: Error, req: Request, res: Response, next: NextFunction) => {\n        this.logger.error(err);\n        res.status(500).send({ error: \"Internal Server Error\" });\n      }\n    );\n  }\n\n  async listen(): Promise<void> {\n    return new Promise((resolve) => {\n      this.httpServer = this.express.listen(this.port, () => {\n        this.logger.info(\n          `Application is running at http://localhost:${\n            this.port\n          } in ${this.express.get(\"env\")} mode`\n        );\n        this.logger.info(\"Press CTRL-C to stop\\n\");\n        resolve();\n      });\n    });\n  }\n\n  async stop(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!this.httpServer) return resolve();\n\n      this.httpServer.close((err) => {\n        return err ? reject(err) : resolve();\n      });\n    });\n  }\n\n  getHttpServer(): http.Server | undefined {\n    return this.httpServer;\n  }\n}\n"],"version":3}