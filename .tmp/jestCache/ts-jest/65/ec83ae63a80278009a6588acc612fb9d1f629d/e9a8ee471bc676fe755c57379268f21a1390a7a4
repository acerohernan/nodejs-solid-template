[["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/tests/status/e2e/get-status.test.ts",{"fileContent":"import request from \"supertest\";\nimport { App } from \"../../../src/app\";\n\nlet application: App;\n\nbeforeAll(async () => {\n  application = new App();\n  await application.start();\n});\n\nafterAll(async () => {\n  await application.stop();\n});\n\ndescribe(\"GET /status\", () => {\n  it(\"should send a 200 response status code\", async () => {\n    const response = await request(application.httpServer).get(\"/status\");\n\n    expect(response.status).toEqual(200);\n    expect(response.text).toEqual(\"OK\");\n  });\n});\n","resolvedModuleNames":["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/app.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/server.ts"]}],["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/app.ts",{"fileContent":"import \"reflect-metadata\";\nimport { Server } from \"./server\";\n\nexport class App {\n  server?: Server;\n\n  async start(): Promise<void> {\n    const port = process.env.PORT || \"3000\";\n    this.server = new Server(port);\n\n    return this.server.listen();\n  }\n\n  async stop() {\n    return this.server?.stop();\n  }\n\n  get httpServer() {\n    return this.server?.getHttpServer();\n  }\n}\n","resolvedModuleNames":["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/server.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/dependency-injection/index.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/modules/shared/interfaces/Logger.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/routes/index.ts"]}],["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/server.ts",{"fileContent":"import cors from \"cors\";\nimport express, {\n  NextFunction,\n  Request,\n  Response,\n  json,\n  urlencoded,\n} from \"express\";\nimport Router from \"express-promise-router\";\nimport helmet from \"helmet\";\nimport http from \"http\";\nimport { ContainerTypes, container } from \"./dependency-injection\";\nimport { Logger } from \"./modules/shared/interfaces/Logger\";\nimport { registerRoutes } from \"./routes\";\n\nexport class Server {\n  private express: express.Express;\n  private logger: Logger;\n  private port: string;\n  httpServer?: http.Server;\n\n  constructor(port: string) {\n    this.port = port;\n\n    /* Get the logger from the container of dependency injection */\n    this.logger = container.get<Logger>(ContainerTypes.Logger);\n\n    /* Initializes the express application */\n    this.express = express();\n\n    /* Parses the request data */\n    this.express.use(json());\n    this.express.use(urlencoded({ extended: true }));\n\n    /* Helmet is for app security with headers */\n    this.express.use(helmet());\n\n    /* Cors development configuration, not use in production */\n    this.express.use(cors({ origin: \"*\" }));\n\n    /* Setup the router */\n    const router = Router();\n\n    this.express.use(router);\n\n    /* Function to register all routes */\n    registerRoutes(router);\n\n    /* Setup the error handler */\n    router.use(\n      (err: Error, req: Request, res: Response, next: NextFunction) => {\n        this.logger.error(err);\n        res.status(500).send({ error: \"Internal Server Error\" });\n      }\n    );\n  }\n\n  async listen(): Promise<void> {\n    return new Promise((resolve) => {\n      this.httpServer = this.express.listen(this.port, () => {\n        this.logger.info(\n          `Application is running at http://localhost:${\n            this.port\n          } in ${this.express.get(\"env\")} mode`\n        );\n        this.logger.info(\"Press CTRL-C to stop\\n\");\n        resolve();\n      });\n    });\n  }\n\n  async stop(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!this.httpServer) return resolve();\n\n      this.httpServer.close((err) => {\n        return err ? reject(err) : resolve();\n      });\n    });\n  }\n\n  getHttpServer(): http.Server | undefined {\n    return this.httpServer;\n  }\n}\n","resolvedModuleNames":["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/dependency-injection/index.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/modules/shared/interfaces/Logger.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/routes/index.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/dependency-injection/container.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/dependency-injection/types.ts"]}],["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/dependency-injection/index.ts",{"fileContent":"export { container } from \"./container\";\nexport { ContainerTypes } from \"./types\";\n","resolvedModuleNames":["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/dependency-injection/container.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/dependency-injection/types.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/modules/shared/adapters/WinstonLogger.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/modules/shared/interfaces/Logger.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/modules/status/status.controller.ts"]}],["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/dependency-injection/container.ts",{"fileContent":"import { Container } from \"inversify\";\nimport { WinstonLogger } from \"../modules/shared/adapters/WinstonLogger\";\nimport { Logger } from \"../modules/shared/interfaces/Logger\";\nimport { StatusController } from \"../modules/status/status.controller\";\nimport { ContainerTypes } from \"./types\";\n\nexport const container = new Container();\n\n/**\n * Logger\n * @description app logger\n * @author acerohernan\n */\ncontainer.bind<Logger>(ContainerTypes.Logger).to(WinstonLogger);\n\n/**\n * StatusControler\n * @description this is the controller for the status endpoints\n * @author acerohernan\n */\ncontainer\n  .bind<StatusController>(ContainerTypes.StatusController)\n  .to(StatusController);\n","resolvedModuleNames":["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/modules/shared/adapters/WinstonLogger.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/modules/shared/interfaces/Logger.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/modules/status/status.controller.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/dependency-injection/types.ts"]}],["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/modules/shared/adapters/WinstonLogger.ts",{"fileContent":"import { injectable } from \"inversify\";\nimport winston, { Logger as WinstonLoggerType } from \"winston\";\nimport { Logger } from \"../interfaces/Logger\";\n\nenum Levels {\n  DEBUG = \"debug\",\n  INFO = \"info\",\n  ERROR = \"error\",\n}\n\n@injectable()\nexport class WinstonLogger implements Logger {\n  private logger: WinstonLoggerType;\n\n  constructor() {\n    this.logger = winston.createLogger({\n      format: winston.format.combine(\n        winston.format.prettyPrint(),\n        winston.format.errors({ stack: true }),\n        winston.format.splat(),\n        winston.format.colorize(),\n        winston.format.simple()\n      ),\n      transports: [\n        new winston.transports.Console(),\n        new winston.transports.File({\n          filename: `logs/${Levels.DEBUG}.log`,\n          level: Levels.DEBUG,\n        }),\n        new winston.transports.File({\n          filename: `logs/${Levels.ERROR}.log`,\n          level: Levels.ERROR,\n        }),\n        new winston.transports.File({\n          filename: `logs/${Levels.INFO}.log`,\n          level: Levels.INFO,\n        }),\n      ],\n    });\n  }\n\n  debug(message: string): void {\n    this.logger.debug(message);\n  }\n  error(message: string | Error): void {\n    this.logger.error(message);\n  }\n  info(message: string): void {\n    this.logger.info(message);\n  }\n}\n","resolvedModuleNames":["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/modules/shared/interfaces/Logger.ts"]}],["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/modules/status/status.controller.ts",{"fileContent":"import { Request, Response } from \"express\";\nimport { injectable } from \"inversify\";\n\n@injectable()\nexport class StatusController {\n  async getHandler(req: Request, res: Response): Promise<void> {\n    res.status(200).send(\"OK\");\n  }\n}\n","resolvedModuleNames":[]}],["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/dependency-injection/types.ts",{"fileContent":"export const ContainerTypes = {\n  /**\n   * Logger\n   * @description app logger\n   * @author acerohernan\n   */\n  Logger: Symbol.for(\"Logger\"),\n\n  /**\n   * StatusControler\n   * @description this is the controller for the status endpoints\n   * @author acerohernan\n   */\n  StatusController: Symbol.for(\"StatusController\"),\n};\n","resolvedModuleNames":[]}],["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/routes/index.ts",{"fileContent":"import { Router } from \"express\";\nimport fs from \"fs\";\n\nexport function registerRoutes(router: Router): void {\n  const filePaths = fs.readdirSync(__dirname);\n  const routes = filePaths.filter((path) => path !== \"index.ts\");\n\n  for (const route of routes) {\n    registerRoute(route, router);\n  }\n}\n\nexport function registerRoute(routePath: string, router: Router) {\n  const file = require(`./${routePath}`);\n  file.register(router);\n}\n","resolvedModuleNames":[]}],["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/routes/status.ts",{"fileContent":"import { Router } from \"express\";\nimport { ContainerTypes, container } from \"../dependency-injection\";\nimport { StatusController } from \"../modules/status/status.controller\";\n\nexport function register(router: Router) {\n  const controller = container.get<StatusController>(\n    ContainerTypes.StatusController\n  );\n\n  router.get(\"/status\", (req, res) => controller.getHandler(req, res));\n}\n","resolvedModuleNames":["/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/dependency-injection/index.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/modules/status/status.controller.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/dependency-injection/container.ts","/home/hernan/Desktop/Projects/templates/nodejs-solid-template/src/dependency-injection/types.ts"]}]]